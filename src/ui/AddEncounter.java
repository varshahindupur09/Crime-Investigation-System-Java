package ui;

import java.awt.CardLayout;
import java.awt.Color;
import java.time.LocalDate;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import hospital_enterprise.Encounter;
import hospital_enterprise.Patient;
import model.Person;
import model.Sys;
import model.User;
import model.UserDirectory;
import hospital_enterprise.VitalSigns;
import utility.UtilityFunctions;

/**
 *
 * @author user
 */
public class AddEncounter extends javax.swing.JPanel {
  
    private JPanel userProcessContainer;
    private Sys sys;
    Patient selectedPatient;
    private HomeScreen homeScreen;
    ImageIcon icon;
    public AddEncounter(JPanel userProcessContainer,Sys sys,HomeScreen homeScreen) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.sys = sys;
        this.homeScreen = homeScreen;
        setSize(1040, 544);
        
        clearFields();
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField4 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        lblUserpic = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblDOB = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        lblContactNum = new javax.swing.JLabel();
        txtAddr = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        tblEncounterHistory = new javax.swing.JScrollPane();
        tblEncHist = new javax.swing.JTable();
        lblEncounterHist = new javax.swing.JLabel();
        lblVitalSections = new javax.swing.JLabel();
        lblBP = new javax.swing.JLabel();
        lblHeartRate = new javax.swing.JLabel();
        txtBP_LOW = new javax.swing.JTextField();
        lblName2 = new javax.swing.JLabel();
        txtBP_HIGH = new javax.swing.JTextField();
        lblSlash = new javax.swing.JLabel();
        txtHeartRate = new javax.swing.JTextField();
        btnSaveEncounter = new javax.swing.JButton();
        txtSearchPatient = new javax.swing.JTextField();
        lblTodaysData = new javax.swing.JLabel();
        lblNameData = new javax.swing.JLabel();
        lblDOBdata = new javax.swing.JLabel();
        lblAgeData = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        btnSearch = new javax.swing.JButton();
        btnDeletePatient = new javax.swing.JButton();

        jTextField4.setText("jTextField4");

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(650, 600));

        jSeparator1.setForeground(new java.awt.Color(17, 125, 161));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lblUserpic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Me.jpeg"))); // NOI18N

        lblName.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblName.setForeground(new java.awt.Color(0, 0, 0));
        lblName.setText("Name:");

        lblDOB.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblDOB.setForeground(new java.awt.Color(0, 0, 0));
        lblDOB.setText("DOB:");

        lblAge.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblAge.setForeground(new java.awt.Color(0, 0, 0));
        lblAge.setText("Age:");

        lblContactNum.setText("   ");

        txtAddr.setWheelScrollingEnabled(false);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        txtAddr.setViewportView(jTextArea1);

        tblEncHist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "EncounterId", "BP_Low", "BP_High", "Heart Rate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEncounterHistory.setViewportView(tblEncHist);
        if (tblEncHist.getColumnModel().getColumnCount() > 0) {
            tblEncHist.getColumnModel().getColumn(0).setResizable(false);
            tblEncHist.getColumnModel().getColumn(1).setResizable(false);
            tblEncHist.getColumnModel().getColumn(2).setResizable(false);
            tblEncHist.getColumnModel().getColumn(3).setResizable(false);
            tblEncHist.getColumnModel().getColumn(4).setResizable(false);
        }

        lblEncounterHist.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        lblEncounterHist.setForeground(new java.awt.Color(0, 0, 0));
        lblEncounterHist.setText("Encounter History for");

        lblVitalSections.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        lblVitalSections.setForeground(new java.awt.Color(0, 0, 0));
        lblVitalSections.setText("Add Vitals for this Visit:");

        lblBP.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblBP.setForeground(new java.awt.Color(0, 0, 0));
        lblBP.setText("Blood pressure:");

        lblHeartRate.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblHeartRate.setForeground(new java.awt.Color(0, 0, 0));
        lblHeartRate.setText("Heart Rate:");

        txtBP_LOW.setText("90");

        lblName2.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblName2.setForeground(new java.awt.Color(0, 0, 0));
        lblName2.setText("/");

        txtBP_HIGH.setText("150");

        lblSlash.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblSlash.setForeground(new java.awt.Color(0, 0, 0));
        lblSlash.setText("mm Hg");

        txtHeartRate.setText("72");

        btnSaveEncounter.setText("Save");
        btnSaveEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveEncounterActionPerformed(evt);
            }
        });

        txtSearchPatient.setText("1");
        txtSearchPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchPatientActionPerformed(evt);
            }
        });

        lblTodaysData.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblTodaysData.setForeground(new java.awt.Color(0, 0, 0));
        lblTodaysData.setText("10/29/2021");

        lblNameData.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblNameData.setForeground(new java.awt.Color(0, 0, 0));
        lblNameData.setText("Aniruddha Tambe");

        lblDOBdata.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblDOBdata.setForeground(new java.awt.Color(0, 0, 0));
        lblDOBdata.setText("10/31/2021");

        lblAgeData.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblAgeData.setForeground(new java.awt.Color(0, 0, 0));
        lblAgeData.setText("25");

        jSeparator2.setForeground(new java.awt.Color(17, 125, 161));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnDeletePatient.setText("Delete Patient");
        btnDeletePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(lblName)
                                .addGap(18, 18, 18)
                                .addComponent(lblNameData)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblDOB)
                                            .addComponent(lblAge))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblDOBdata, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblAgeData)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(btnDeletePatient)
                                        .addComponent(lblContactNum, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)))
                        .addComponent(txtAddr, 0, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblUserpic, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblEncounterHist)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSearch))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblVitalSections, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblTodaysData))
                                    .addComponent(tblEncounterHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 634, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(67, 67, 67))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblHeartRate)
                                    .addComponent(lblBP))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtBP_LOW, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblName2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtBP_HIGH, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblSlash))
                                    .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnSaveEncounter)
                                .addGap(226, 226, 226)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnSaveEncounter, txtBP_HIGH, txtBP_LOW, txtHeartRate, txtSearchPatient});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblUserpic, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(43, 43, 43)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblName)
                                .addComponent(lblNameData))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtAddr, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblDOB)
                                        .addComponent(lblDOBdata))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblAge)
                                        .addComponent(lblAgeData))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(lblContactNum)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnDeletePatient)
                            .addGap(77, 77, 77))
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEncounterHist, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch))
                        .addGap(18, 18, 18)
                        .addComponent(tblEncounterHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblVitalSections, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTodaysData))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBP)
                            .addComponent(txtBP_LOW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName2)
                            .addComponent(txtBP_HIGH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSlash))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHeartRate)
                            .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(btnSaveEncounter)))
                .addContainerGap(80, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchPatientActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_txtSearchPatientActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        
        selectedPatient = sys.getPatDir().getPatientById(Integer.parseInt(txtSearchPatient.getText()));
        
        //Poplate Data on screen
        if(!populateDetails(selectedPatient)){
            return;
        }
        
        //Populate encounter history
        populateTable(selectedPatient);
        
        //Populate today's data for visit
        populateDate();
        
        btnSaveEncounter.setEnabled(true);
        
    }//GEN-LAST:event_btnSearchActionPerformed

    public void populateDate(){
        
        UtilityFunctions util = new UtilityFunctions();
        
        lblTodaysData.setText(util.covertDateToString(LocalDate.now()));
        
    }
    private void btnSaveEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveEncounterActionPerformed
        // TODO add your handling code here:
        
        if(!validations()){
            return;
        }
        
        saveValues();
        
        JOptionPane.showMessageDialog(this, "Visit saved");
        
        populateTable(selectedPatient);
        
    }//GEN-LAST:event_btnSaveEncounterActionPerformed

    private void btnDeletePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePatientActionPerformed
        // TODO add your handling code here:
        
        sys.getPatDir().getPatientList().remove(selectedPatient);
        JOptionPane.showMessageDialog(this, "Patient Deleted");
        
        //Reset fiedls
        clearFields();
        DefaultTableModel model = (DefaultTableModel) tblEncHist.getModel();
        model.setRowCount(0);
        txtSearchPatient.setText("");
    }//GEN-LAST:event_btnDeletePatientActionPerformed
    
    public void saveValues(){
        
        UtilityFunctions util = new UtilityFunctions();
        
        double BP_LOW = util.convertToDouble(txtBP_LOW.getText());
        double BP_HIGH = util.convertToDouble(txtBP_HIGH.getText());
        double HR = util.convertToDouble(txtHeartRate.getText());
        
        selectedPatient.getEncounterHistory().addEncounter(new VitalSigns(BP_LOW,BP_HIGH,HR));
        
    }
    public boolean validations(){
        
       UtilityFunctions utility = new UtilityFunctions();
        
        //Field validations
        boolean valFlag = true;
        int misCounter = 0;
        int temp = 0;
        
        //Error Message
        String errorMessage = "";
        
        //1. BP Low Number ***************************************************************************
        
        // TC.1 - No Null value
        temp = misCounter;
        misCounter = misCounter + utility.runValidation(".+",txtBP_LOW.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Missing value in BP-Low field"+"\n";
        }
        
        //TC.2 - No special characters
        temp = misCounter;
        misCounter = misCounter + utility.runValidation("^([^!@#$%^&*()]*)$",txtBP_LOW.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Remove special characters in BP-Low field"+"\n";
        }
        
        //TC.3 - Only numbers
        temp = misCounter;
        misCounter = misCounter + utility.runValidation("^[0-9]*\\.?[0-9]*$",txtBP_LOW.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Please enter numbers in city field"+"\n";
        }
        
       //2. BP High Number ***************************************************************************
       
       // TC.1 - No Null value
        temp = misCounter;
        misCounter = misCounter + utility.runValidation(".+",txtBP_HIGH.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Missing value in BP-Low field"+"\n";
        }
        
        //TC.2 - No special characters
        temp = misCounter;
        misCounter = misCounter + utility.runValidation("^([^!@#$%^&*()]*)$",txtBP_HIGH.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Remove special characters in BP-Low field"+"\n";
        }
        
        //TC.3 - Only numbers
        temp = misCounter;
        misCounter = misCounter + utility.runValidation("^[0-9]*\\.?[0-9]*$",txtBP_HIGH.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Please enter numbers in city field"+"\n";
        }
        
        
       //3. Heart rate ***************************************************************************
       // TC.1 - No Null value
        temp = misCounter;
        misCounter = misCounter + utility.runValidation(".+",txtHeartRate.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Missing value in BP-Low field"+"\n";
        }
        
        //TC.2 - No special characters
        temp = misCounter;
        misCounter = misCounter + utility.runValidation("^([^!@#$%^&*()]*)$",txtHeartRate.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Remove special characters in BP-Low field"+"\n";
        }
        
        //TC.3 - Only numbers
        temp = misCounter;
        misCounter = misCounter + utility.runValidation("^[0-9]+$",txtHeartRate.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Please enter numbers in city field"+"\n";
        }
       
       
       // ********************************************************************************************
        // Check validations
        if(misCounter > 0){
           JOptionPane.showMessageDialog(this, errorMessage);
           valFlag = false;
        }
        // ********************************************************************************************
        
        
        return valFlag;
        
    }

    
    public boolean populateDetails(Patient selectedPatient){
    
        //Patient section
        return populatePersonSection(selectedPatient);
        
        //Encounter section
        
        
        
    }
    
     public void clearFields(){
        
        lblNameData.setText("");
        lblAgeData.setText("");
        lblDOBdata.setText("");
        txtSearchPatient.setText("");
        txtBP_LOW.setText("");
        txtBP_HIGH.setText("");
        txtHeartRate.setText("");
        lblTodaysData.setText("");
        
        //Display the image
        icon = new ImageIcon("C://Users//user//Documents//NetBeansProjects//Lab_3_Skeleton//src//res//AED_ASS_4_user.png");
        //icon = utility.scaleImage(icon, 320, 240);
        
        lblUserpic.setIcon(icon);
        
        btnSaveEncounter.setEnabled(false);
        
    }
    
    public boolean populatePersonSection(Patient selectedPatient){
        
        Person person;
        try{
             person = selectedPatient.getPerson();
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Patient not found!!");
            return false;
            
        }
        
        UtilityFunctions utility = new UtilityFunctions();
        
        lblNameData.setText(person.getName());
        lblAgeData.setText(person.getAge()+"");
        lblDOBdata.setText(utility.covertDateToString(person.getDob()));

        //Display the image
        
        try{
        if(!person.getImagePath().equals("")){
            icon = new ImageIcon(person.getImagePath());
        }else {
            icon = new ImageIcon("AED_ASS_4_user.png");
        }
        }catch(Exception e){
            icon = new ImageIcon("AED_ASS_4_user.png");
        }
        
        lblUserpic.setIcon(icon);
        
        return true;
        
    }
    
    private void populateTable(Patient selectedPatient) {
        
        DefaultTableModel model = (DefaultTableModel) tblEncHist.getModel();
        
        //Delete empty rows
        model.setRowCount(0);
        
        
        for(Encounter enc:selectedPatient.getEncounterHistory().getEncounterList()){
            
            Object[] row = new Object[5]; // Number of elements in the table - 6
            row[0] = enc;//.getName();
            row[1] = enc.getId();
            row[2] = enc.getVital().getBloodPressure_LOW();
            row[3] = enc.getVital().getBloodPressure_HIGH();
            row[4] = enc.getVital().getHeartRate();
            
            model.addRow(row);
        }
        
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeletePatient;
    private javax.swing.JButton btnSaveEncounter;
    private javax.swing.JButton btnSearch;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblAgeData;
    private javax.swing.JLabel lblBP;
    private javax.swing.JLabel lblContactNum;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblDOBdata;
    private javax.swing.JLabel lblEncounterHist;
    private javax.swing.JLabel lblHeartRate;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName2;
    private javax.swing.JLabel lblNameData;
    private javax.swing.JLabel lblSlash;
    private javax.swing.JLabel lblTodaysData;
    private javax.swing.JLabel lblUserpic;
    private javax.swing.JLabel lblVitalSections;
    private javax.swing.JTable tblEncHist;
    private javax.swing.JScrollPane tblEncounterHistory;
    private javax.swing.JScrollPane txtAddr;
    private javax.swing.JTextField txtBP_HIGH;
    private javax.swing.JTextField txtBP_LOW;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtSearchPatient;
    // End of variables declaration//GEN-END:variables

    
}

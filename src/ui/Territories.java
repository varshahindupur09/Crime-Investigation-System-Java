package ui;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.Sys;
import model.User;
import model.UserDirectory;
import utility.UtilityFunctions;

/**
 *
 * @author  user
 */
public class Territories extends javax.swing.JPanel {
  
    private JPanel userProcessContainer;
    private Sys sys;
    private HomeScreen homeScreen;
    
    boolean flagForNew = false;
    boolean flagForUpdate = false;
    
    City selectCity;
    Community selectComm;
    public Territories(JPanel userProcessContainer,Sys sys,HomeScreen homeScreen) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.sys = sys;
        this.homeScreen = homeScreen;
        setSize(1040, 544);
        
        //Populate entries
        populateTable();
        makeUneditable();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCityDir = new javax.swing.JTable();
        lblCommunity1 = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        lblCity = new javax.swing.JLabel();
        lblEncounterHist = new javax.swing.JLabel();
        btnView = new javax.swing.JButton();
        txtCommunity = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        txtCity = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(650, 600));

        jPanel1.setBackground(new java.awt.Color(17, 125, 161));
        jPanel1.setForeground(new java.awt.Color(17, 125, 161));

        tblCityDir.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Community", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCityDir);
        if (tblCityDir.getColumnModel().getColumnCount() > 0) {
            tblCityDir.getColumnModel().getColumn(1).setResizable(false);
        }

        lblCommunity1.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblCommunity1.setForeground(new java.awt.Color(255, 255, 255));
        lblCommunity1.setText("Community");

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        lblCity.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblCity.setForeground(new java.awt.Color(255, 255, 255));
        lblCity.setText("City");

        lblEncounterHist.setFont(new java.awt.Font("Segoe UI Semibold", 1, 36)); // NOI18N
        lblEncounterHist.setForeground(new java.awt.Color(255, 255, 255));
        lblEncounterHist.setText("Add Territories");

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblEncounterHist)
                .addGap(151, 151, 151))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCommunity1)
                    .addComponent(lblCity))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnView)
                    .addComponent(btnSave)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate)
                    .addComponent(btnNew))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDelete, btnNew, btnSave, btnUpdate, btnView});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCity, txtCommunity});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblEncounterHist, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(btnNew)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCommunity1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCity)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnView)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(222, 222, 222)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(187, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
        //Make editable
        makeEditable();
        btnSave.setEnabled(true);
        
        flagForNew = false;
        flagForUpdate = true;
        
        // Select the records
        int selectedRow = tblCityDir.getSelectedRow();
        
        if(selectedRow < 0){
            
            JOptionPane.showMessageDialog(this, "Please select a row");
        
        }else{
            
            try{
                DefaultTableModel model = (DefaultTableModel) tblCityDir.getModel();
                City selectedCity = (City) model.getValueAt(selectedRow, 1);
                
                selectCity = selectedCity;
                selectComm = (Community) model.getValueAt(selectedRow, 0);
                
                populateFields(selectedRow);
                btnUpdate.setEnabled(false);
            
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Select valid entry");
            }
            
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblCityDir.getSelectedRow();
        
        if(selectedRow < 0){
            
            JOptionPane.showMessageDialog(this, "Please select a row");
        
        }else{
            
            //Make them uneditable
            makeUneditable();
            btnSave.setEnabled(false);
                    
            try{
                DefaultTableModel model = (DefaultTableModel) tblCityDir.getModel();
                City selectedCity = (City) model.getValueAt(selectedRow, 1);
                selectCity = selectedCity;
                selectComm = (Community) model.getValueAt(selectedRow, 0);
                
                populateFields(selectedRow);
                btnUpdate.setEnabled(true);
            
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Select valid entry");
            }
            
            
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblCityDir.getSelectedRow();
        
        if(selectedRow < 0){
            
            JOptionPane.showMessageDialog(this, "Please select a row");
        
        }else{
            
            //Make them uneditable
            makeUneditable();
            btnSave.setEnabled(false);
                    
            try{
                DefaultTableModel model = (DefaultTableModel) tblCityDir.getModel();
                City selectedCity = (City) model.getValueAt(selectedRow, 1);
                selectCity = selectedCity;
                selectComm = (Community) model.getValueAt(selectedRow, 0);
                
                selectCity.getCommList().remove(selectComm);
                JOptionPane.showMessageDialog(this, "Community Deleted");
                btnDelete.setEnabled(false);
                btnUpdate.setEnabled(false);
                resetValues();
            
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Select valid entry");
            }
            
            
        }
        populateTable();
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        
        //Setting the delete & update button
        btnDelete.setEnabled(true);
        btnUpdate.setEnabled(true);
        
        if(flagForNew){
            
            City city;
            
            if(!sys.checkIfCityExists(txtCity.getText().replaceAll(" ", ""))){
            
            if(!validate(txtCity.getText().replaceAll(" ", ""))){
                return;
            }
            
            city = sys.addCity(txtCity.getText().replaceAll(" ", ""));
            
            //Validate community
            if(!validate(txtCommunity.getText().replaceAll(" ", ""))){
                return;
            }
            
            //Add community
            city.newCommunity(txtCommunity.getText());
            
            JOptionPane.showMessageDialog(this, "Community added!");
            
        }else {
            
            city = sys.getCity(txtCity.getText().replaceAll(" ", ""));
            
            //Validate community
            if(!validate(txtCommunity.getText().replaceAll(" ", ""))){
                return;
            }
            
            //Add community
            city.newCommunity(txtCommunity.getText());

            JOptionPane.showMessageDialog(this, "Community added!");
            
        }
            
        }else if(flagForUpdate){
        
            selectCity.setCitName(txtCity.getText());
            selectComm.setCommName(txtCommunity.getText());
            
            JOptionPane.showMessageDialog(this, "Community or City updated!");
            
            populateTable();
        }
        
        
       
        
        
        btnSave.setEnabled(false);
        makeUneditable();
        populateTable();
        
    }//GEN-LAST:event_btnSaveActionPerformed
    
    public boolean validate(String city){
    
        //String city = txtCity.getText().replaceAll(" ", "");
        
        
        UtilityFunctions util = new UtilityFunctions();
        
        //Field validations
        boolean valFlag = true;
        int misCounter = 0;
        int temp = 0;
        
        //Error Message
        String errorMessage = "";
        
        //1. Model Number ***************************************************************************
        
        // TC.1 - No Null value
        temp = misCounter;
        misCounter = misCounter + util.runValidation(".+",city);
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Missing value in City field"+"\n";
        }
        
        //TC.2 - No special characters
        temp = misCounter;
        misCounter = misCounter + util.runValidation("^([^!@#$%^&*()]*)$",city);
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Remove special characters in City"+"\n";
        }
        
        //3. City *************************************************************************************
        
        //TC.1 - No Null Value
        temp = misCounter;
        misCounter = misCounter + util.runValidation(".+",txtCity.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Missing value in city field"+"\n";
        }
        
        //TC.2 - No special characters
        temp = misCounter;
        misCounter = misCounter + util.runValidation("^([^!@#$%^&*()]*)$",txtCity.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Remove special characters in city field"+"\n";
        }
        
        //TC.3 - No numbers
        temp = misCounter;
        misCounter = misCounter + util.runValidation("^[a-zA-Z]+$",txtCity.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Please enter alphabets in city field"+"\n";
        }

        // ********************************************************************************************
        // Check validations
        if(misCounter > 0){
           JOptionPane.showMessageDialog(this, errorMessage);
           valFlag = false;
        }
        // ********************************************************************************************
       
        return valFlag;
    }
    
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        
        //Clear fields
        resetValues();
        makeEditable();
        btnSave.setEnabled(true);
        
        flagForNew = true;
        flagForUpdate = false;
        
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
        
    }//GEN-LAST:event_btnNewActionPerformed
    
    public void populateFields(int selectedRow){
        
        
        DefaultTableModel model = (DefaultTableModel) tblCityDir.getModel();
        City selectedCity = (City) model.getValueAt(selectedRow, 1);
        Community selectedCommunity = (Community) model.getValueAt(selectedRow, 0);
        
        
        txtCommunity.setText(selectedCommunity.getCommName());
        txtCity.setText(selectedCity.getCitName());
    
    }
    private void populateTable() {
        
        DefaultTableModel model = (DefaultTableModel) tblCityDir.getModel();
        
        //Delete empty rows
        model.setRowCount(0);
        
        for(City city: sys.getCityList()){
            
            for(Community comm: city.getCommList()){

                Object[] row = new Object[2]; // Number of elements in the table - 6
                row[0] = comm;//.getName();
                row[1] = city;

                model.addRow(row);
            }
        }
        
        btnSave.setEnabled(false);
        btnDelete.setEnabled(true);
        
    }
    
    public void resetValues(){
        txtCommunity.setText("");
        txtCity.setText("");
    }
    
    public void makeUneditable(){
         txtCommunity.setEditable(false);
         txtCity.setEditable(false);
    }
    
    public void makeEditable(){
         txtCommunity.setEditable(true);
         txtCity.setEditable(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity1;
    private javax.swing.JLabel lblEncounterHist;
    private javax.swing.JTable tblCityDir;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCommunity;
    // End of variables declaration//GEN-END:variables
    
}
